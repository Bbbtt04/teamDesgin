// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// 用户模型
model User {
  id         String     @id @default(uuid())
  username   String     @unique
  password   String
  realName   String
  status     Int
  department String?
  phone      String?
  createTime DateTime   @default(now())
  userRoles  UserRole[]
  assignedAlerts Alert[] @relation("AssignedAlerts")
}

// 角色模型
model Role {
  id              String           @id @default(uuid())
  name            String           @unique
  description     String
  userRoles       UserRole[]
  rolePermissions RolePermission[]
}

// 权限模型
model Permission {
  id              String           @id @default(uuid())
  name            String           @unique
  rolePermissions RolePermission[]
}

// 用户-角色关联
model UserRole {
  id     String @id @default(uuid())
  userId String
  roleId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
}

// 角色-权限关联
model RolePermission {
  id           String     @id @default(uuid())
  roleId       String
  permissionId String
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
}

// 告警模型
model Alert {
  id          String   @id @default(uuid())
  title       String   // 告警标题
  content     String   // 告警内容
  type        Int      // 告警类型：1-设备告警 2-系统告警
  level       Int      // 告警级别：0-一般 1-重要 2-紧急
  status      Int      // 告警状态：0-未处理 1-已处理 2-已忽略
  source      Int      // 告警来源：0-系统检测 1-设备上报
  fieldId     String?  // 关联大田ID
  sectionId   String?  // 关联分区ID
  equipmentId String?  // 关联设备ID
  assigneeId  String?  // 指派人ID
  assignee    User?    @relation("AssignedAlerts", fields: [assigneeId], references: [id])
  field       Field?   @relation(fields: [fieldId], references: [id], onDelete: SetNull)
  section     FieldSection? @relation(fields: [sectionId], references: [id], onDelete: SetNull)
  equipment   Equipment? @relation(fields: [equipmentId], references: [id], onDelete: SetNull)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([fieldId])
  @@index([sectionId])
  @@index([equipmentId])
  @@index([assigneeId])
}

// 大田模型
model Field {
  id         String         @id @default(uuid())
  name       String
  address    String
  manager    String
  area       Float
  areaUnit   String
  status     Int
  remark     String?
  createTime DateTime       @default(now())
  updateTime DateTime       @updatedAt
  sections   FieldSection[]
  activities Activity[]
  farmTrends FarmTrend[]
  alerts     Alert[]
}

// 大田分区模型
model FieldSection {
  id         String     @id @default(uuid())
  fieldId    String
  name       String
  area       Float
  areaUnit   String
  cropType   String?
  status     Int
  remark     String?
  createTime DateTime   @default(now())
  updateTime DateTime   @updatedAt
  field      Field      @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  activities Activity[]
  alerts     Alert[]
}

// 农事活动模型
model Activity {
  id                String        @id @default(uuid())
  fieldId           String
  sectionId         String?
  title             String
  activityType      Int
  description       String?
  startTime         DateTime
  endTime           DateTime?
  status            Int
  executor          String
  materials         Json? // 存储材料数组
  dataSource        Int
  weatherInfo       String?
  effectDescription String?
  images            Json? // 存储图片URL数组
  createTime        DateTime      @default(now())
  updateTime        DateTime      @updatedAt
  remark            String?
  field             Field         @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  section           FieldSection? @relation(fields: [sectionId], references: [id], onDelete: SetNull)
}

// 设备模型
model Equipment {
  id                  String      @id @default(uuid()) // 设备ID
  name                String      // 设备名称
  type                Int         // 设备类型
  model               String      // 设备型号
  serialNumber        String      @unique // 序列号
  status              Int         // 设备状态
  location            String?     // 设备位置
  fieldId             String?     // 大田ID
  sectionId           String?     // 分区ID
  installTime         DateTime?   // 安装时间
  lastMaintenanceTime DateTime?   // 上次维护时间
  nextMaintenanceTime DateTime?   // 下次维护时间
  description         String?     // 设备描述
  manufacturer        String?     // 制造商
  purchaseDate        DateTime?   // 购买日期
  createTime          DateTime    @default(now()) // 创建时间
  updateTime          DateTime    @updatedAt // 更新时间
  farmTrends          FarmTrend[] // 农场动态
  alerts              Alert[]     // 警报
}

// 农场动态模型
model FarmTrend {
  id          String     @id @default(uuid())
  avatar      String // 头像图标
  title       String // 标题(人名)
  content     String // 内容
  date        DateTime // 日期时间
  fieldId     String?
  equipmentId String?
  createTime  DateTime   @default(now())
  updateTime  DateTime   @updatedAt
  field       Field?     @relation(fields: [fieldId], references: [id], onDelete: SetNull)
  equipment   Equipment? @relation(fields: [equipmentId], references: [id], onDelete: SetNull)
}

// 操作日志
model OperationLog {
  id            String   @id @default(uuid())
  username      String // 操作用户
  operationType String // 操作类型
  module        String // 模块名称
  description   String // 操作描述
  requestUrl    String // 请求URL
  requestMethod String // 请求方法
  requestParams String   @db.Text // 请求参数
  responseData  String   @db.Text // 响应数据
  status        String // 操作状态
  errorMessage  String?  @db.Text // 错误信息
  ip            String // IP地址
  browser       String // 浏览器
  os            String // 操作系统
  createTime    DateTime @default(now()) // 创建时间

  @@map("operation_logs")
}
